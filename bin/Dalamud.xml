<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dalamud</name>
    </assembly>
    <members>
        <member name="T:Dalamud.Data.DataManager">
            <summary>
            This class provides data for Dalamud-internal features, but can also be used by plugins if needed.
            </summary>
        </member>
        <member name="F:Dalamud.DiscordBot.DiscordBotManager.worldIcon">
            <summary>
                The FFXIV payload sequence to represent the name/world separator
            </summary>
        </member>
        <member name="T:Dalamud.Game.Chat.SeStringHandling.Payload">
            <summary>
            This class represents a parsed SeString payload.
            </summary>
        </member>
        <member name="P:Dalamud.Game.Chat.SeStringHandling.Payloads.TextPayload.Text">
            <summary>
            The Text of this text payload as an UTF-8 converted string.
            Don't rely on this for accurate representation of SE payload data, please check RawData instead.
            </summary>
        </member>
        <member name="P:Dalamud.Game.Chat.SeStringHandling.Payloads.TextPayload.RawData">
            <summary>
            The raw unconverted data of this text payload.
            </summary>
        </member>
        <member name="T:Dalamud.Game.Chat.SeStringHandling.PayloadType">
            <summary>
            All parsed types of SeString payloads.
            </summary>
        </member>
        <member name="F:Dalamud.Game.Chat.SeStringHandling.PayloadType.Player">
            <summary>
            An SeString payload representing a player link.
            </summary>
        </member>
        <member name="F:Dalamud.Game.Chat.SeStringHandling.PayloadType.Item">
            <summary>
            An SeString payload representing an Item link.
            </summary>
        </member>
        <member name="F:Dalamud.Game.Chat.SeStringHandling.PayloadType.Status">
            <summary>
            An SeString payload representing an Status Effect link.
            </summary>
        </member>
        <member name="F:Dalamud.Game.Chat.SeStringHandling.PayloadType.RawText">
            <summary>
            An SeString payload representing raw, typed text.
            </summary>
        </member>
        <member name="F:Dalamud.Game.Chat.SeStringHandling.PayloadType.Unknown">
            <summary>
            An SeString payload representing any data we don't handle.
            </summary>
        </member>
        <member name="T:Dalamud.Game.Chat.SeStringHandling.SeString">
            <summary>
            This class represents a parsed SeString.
            </summary>
        </member>
        <member name="P:Dalamud.Game.Chat.SeStringHandling.SeString.TextValue">
            <summary>
            Helper function to get all raw text from a message as a single joined string
            </summary>
            <returns>
            All the raw text from the contained payloads, joined into a single string
            </returns>
        </member>
        <member name="M:Dalamud.Game.Chat.SeStringHandling.SeString.Parse(System.Byte[])">
            <summary>
            Parse an array of bytes to a SeString.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Dalamud.Game.Chat.SeStringHandling.SeString.Encode">
            <summary>
            Encode a parsed/created SeString to an array of bytes, to be used for injection.
            </summary>
            <param name="payloads"></param>
            <returns>The bytes of the message.</returns>
        </member>
        <member name="T:Dalamud.Game.Chat.XivChatType">
            <summary>
                The FFXIV chat types as seen in the LogKind ex table.
            </summary>
        </member>
        <member name="T:Dalamud.Game.ClientState.Actors.ActorTable">
            <summary>
                This collection represents the currently spawned FFXIV actors.
            </summary>
        </member>
        <member name="M:Dalamud.Game.ClientState.Actors.ActorTable.#ctor(Dalamud.Game.ClientState.ClientStateAddressResolver)">
            <summary>
                Set up the actor table collection.
            </summary>
            <param name="addressResolver">Client state address resolver.</param>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.ActorTable.Item(System.Int32)">
            <summary>
                Get an actor at the specified spawn index.
            </summary>
            <param name="index">Spawn index.</param>
            <returns><see cref="T:Dalamud.Game.ClientState.Actors.Types.Actor" /> at the specified spawn index.</returns>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.ActorTable.Length">
            <summary>
                The amount of currently spawned actors.
            </summary>
        </member>
        <member name="T:Dalamud.Game.ClientState.Actors.ObjectKind">
            <summary>
                Enum describing possible entity kinds.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.ObjectKind.None">
            <summary>
                Invalid actor.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.ObjectKind.Player">
            <summary>
                Objects representing player characters.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.ObjectKind.BattleNpc">
            <summary>
                Objects representing battle NPCs.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.ObjectKind.EventNpc">
            <summary>
                Objects representing event NPCs.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.ObjectKind.Treasure">
            <summary>
                Objects representing treasures.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.ObjectKind.Aetheryte">
            <summary>
                Objects representing aetherytes.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.ObjectKind.GatheringPoint">
            <summary>
                Objects representing gathering points.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.ObjectKind.EventObj">
            <summary>
                Objects representing event objects.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.ObjectKind.MountType">
            <summary>
                Objects representing mounts.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.ObjectKind.Companion">
            <summary>
                Objects representing minions.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.ObjectKind.Retainer">
            <summary>
                Objects representing retainers.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.ObjectKind.Housing">
            <summary>
                Objects representing housing objects.
            </summary>
        </member>
        <member name="T:Dalamud.Game.ClientState.Actors.Resolvers.ClassJob">
            <summary>
            This object represents a class or job.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.Resolvers.ClassJob.Id">
            <summary>
            ID of the ClassJob.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Resolvers.ClassJob.Name">
            <summary>
            Name of the ClassJob.
            </summary>
        </member>
        <member name="M:Dalamud.Game.ClientState.Actors.Resolvers.ClassJob.#ctor(System.Byte)">
            <summary>
            Set up the ClassJob resolver with the provided ID.
            </summary>
            <param name="id">The ID of the world.</param>
        </member>
        <member name="T:Dalamud.Game.ClientState.Actors.Resolvers.World">
            <summary>
            This object represents a world a character can reside on.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.Resolvers.World.Id">
            <summary>
            ID of the world.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Resolvers.World.Name">
            <summary>
            Name of the world.
            </summary>
        </member>
        <member name="M:Dalamud.Game.ClientState.Actors.Resolvers.World.#ctor(System.Byte)">
            <summary>
            Set up the world resolver with the provided ID.
            </summary>
            <param name="id">The ID of the world.</param>
        </member>
        <member name="T:Dalamud.Game.ClientState.Actors.Types.Actor">
            <summary>
                This class represents a basic FFXIV actor.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.Types.Actor.actorStruct">
            <summary>
                The memory representation of the base actor.
            </summary>
        </member>
        <member name="M:Dalamud.Game.ClientState.Actors.Types.Actor.#ctor(Dalamud.Game.ClientState.Structs.Actor)">
            <summary>
                Initialize a representation of a basic FFXIV actor.
            </summary>
            <param name="actorStruct">The memory representation of the base actor.</param>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.Actor.Position">
            <summary>
                Position of this <see cref="T:Dalamud.Game.ClientState.Actors.Types.Actor" />.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.Actor.Name">
            <summary>
                Displayname of this <see cref="T:Dalamud.Game.ClientState.Actors.Types.Actor">Actor</see>.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.Actor.ActorId">
            <summary>
                Actor ID of this <see cref="T:Dalamud.Game.ClientState.Actors.Types.Actor" />.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.Actor.ObjectKind">
            <summary>
                Entity kind of this <see cref="T:Dalamud.Game.ClientState.Actors.Types.Actor">actor</see>. See <see cref="P:Dalamud.Game.ClientState.Actors.Types.Actor.ObjectKind">the ObjectKind enum</see> for
                possible values.
            </summary>
        </member>
        <member name="T:Dalamud.Game.ClientState.Actors.Types.Chara">
            <summary>
                This class represents the base for non-static entities.
            </summary>
        </member>
        <member name="M:Dalamud.Game.ClientState.Actors.Types.Chara.#ctor(Dalamud.Game.ClientState.Structs.Actor)">
            <summary>
                Set up a new Chara with the provided memory representation.
            </summary>
            <param name="actorStruct">The memory representation of the base actor.</param>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.Chara.Level">
            <summary>
                The level of this Chara.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.Chara.ClassJob">
            <summary>
                The ClassJob of this Chara.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.Chara.CurrentHp">
            <summary>
                The current HP of this Chara.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.Chara.MaxHp">
            <summary>
                The maximum HP of this Chara.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.Chara.CurrentMp">
            <summary>
                The current MP of this Chara.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.Chara.MaxMp">
            <summary>
                The maximum MP of this Chara.
            </summary>
        </member>
        <member name="T:Dalamud.Game.ClientState.Actors.Types.NonPlayer.BattleNpc">
            <summary>
                This class represents a battle NPC.
            </summary>
        </member>
        <member name="M:Dalamud.Game.ClientState.Actors.Types.NonPlayer.BattleNpc.#ctor(Dalamud.Game.ClientState.Structs.Actor)">
            <summary>
                Set up a new BattleNpc with the provided memory representation.
            </summary>
            <param name="actorStruct">The memory representation of the base actor.</param>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.NonPlayer.BattleNpc.BattleNpcKind">
            <summary>
                The BattleNpc <see cref="T:Dalamud.Game.ClientState.Actors.Types.NonPlayer.BattleNpcSubKind" /> of this BattleNpc.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.NonPlayer.BattleNpc.OwnerId">
            <summary>
                The ID of this BattleNpc's owner.
            </summary>
        </member>
        <member name="T:Dalamud.Game.ClientState.Actors.Types.NonPlayer.BattleNpcSubKind">
            <summary>
                Enum describing possible BattleNpc kinds.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.Types.NonPlayer.BattleNpcSubKind.None">
            <summary>
                Invalid BattleNpc.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.Types.NonPlayer.BattleNpcSubKind.Pet">
            <summary>
                BattleNpc representing a Pet.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.Actors.Types.NonPlayer.BattleNpcSubKind.Enemy">
            <summary>
                BattleNpc representing a standard enemy.
            </summary>
        </member>
        <member name="T:Dalamud.Game.ClientState.Actors.Types.NonPlayer.Npc">
            <summary>
                This class represents a NPC.
            </summary>
        </member>
        <member name="M:Dalamud.Game.ClientState.Actors.Types.NonPlayer.Npc.#ctor(Dalamud.Game.ClientState.Structs.Actor)">
            <summary>
                Set up a new NPC with the provided memory representation.
            </summary>
            <param name="actorStruct">The memory representation of the base actor.</param>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.NonPlayer.Npc.DataId">
            <summary>
                The data ID of the NPC linking to their respective game data.
            </summary>
        </member>
        <member name="T:Dalamud.Game.ClientState.Actors.Types.PlayerCharacter">
            <summary>
                This class represents a player character.
            </summary>
        </member>
        <member name="M:Dalamud.Game.ClientState.Actors.Types.PlayerCharacter.#ctor(Dalamud.Game.ClientState.Structs.Actor)">
            <summary>
                Set up a new player character with the provided memory representation.
            </summary>
            <param name="actorStruct">The memory representation of the base actor.</param>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.PlayerCharacter.CurrentWorld">
            <summary>
                The current <see cref="T:Dalamud.Game.ClientState.Actors.Resolvers.World">world</see> of the character.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.Actors.Types.PlayerCharacter.HomeWorld">
            <summary>
                The home <see cref="T:Dalamud.Game.ClientState.Actors.Resolvers.World">world</see> of the character.
            </summary>
        </member>
        <member name="T:Dalamud.Game.ClientState.ClientState">
            <summary>
            This class represents the state of the game client at the time of access.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.ClientState.Actors">
            <summary>
            The table of all present actors.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.ClientState.LocalPlayer">
            <summary>
            The local player character, if one is present.
            </summary>
        </member>
        <member name="P:Dalamud.Game.ClientState.ClientState.LocalContentId">
            <summary>
            The content ID of the local character.
            </summary>
        </member>
        <member name="F:Dalamud.Game.ClientState.ClientState.JobGauges">
            <summary>
            The class facilitating Job Gauge data access
            </summary>
        </member>
        <member name="M:Dalamud.Game.ClientState.ClientState.#ctor(Dalamud.Dalamud,Dalamud.DalamudStartInfo,Dalamud.Game.SigScanner,System.Diagnostics.ProcessModule)">
            <summary>
            Set up client state access.
            </summary>
            <param name="dalamud">Dalamud instance</param>
            /// <param name="startInfo">StartInfo of the current Dalamud launch</param>
            <param name="scanner">Sig scanner</param>
            <param name="targetModule">Game process module</param>
        </member>
        <member name="T:Dalamud.Game.ClientState.Structs.Actor">
            <summary>
            Native memory representation of a FFXIV actor.
            </summary>
        </member>
        <member name="T:Dalamud.Game.Command.CommandInfo">
            <summary>
            This class describes a registered command.
            </summary>
        </member>
        <member name="T:Dalamud.Game.Command.CommandInfo.HandlerDelegate">
            <summary>
            The function to be executed when the command is dispatched.
            </summary>
            <param name="command">The command itself.</param>
            <param name="arguments">The arguments supplied to the command, ready for parsing.</param>
        </member>
        <member name="P:Dalamud.Game.Command.CommandInfo.Handler">
            <summary>
            A <see cref="T:Dalamud.Game.Command.CommandInfo.HandlerDelegate"/> which will be called when the command is dispatched.
            </summary>
        </member>
        <member name="P:Dalamud.Game.Command.CommandInfo.HelpMessage">
            <summary>
            The help message for this command.
            </summary>
        </member>
        <member name="P:Dalamud.Game.Command.CommandInfo.ShowInHelp">
            <summary>
            If this command should be shown in the help output.
            </summary>
        </member>
        <member name="M:Dalamud.Game.Command.CommandInfo.#ctor(Dalamud.Game.Command.CommandInfo.HandlerDelegate)">
            <summary>
            Create a new CommandInfo with the provided handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Dalamud.Game.Command.CommandManager">
            <summary>
            This class manages registered in-game slash commands.
            </summary>
        </member>
        <member name="P:Dalamud.Game.Command.CommandManager.Commands">
            <summary>
            Read-only list of all registered commands.
            </summary>
        </member>
        <member name="M:Dalamud.Game.Command.CommandManager.DispatchCommand(System.String,System.String,Dalamud.Game.Command.CommandInfo)">
            <summary>
            Dispatch the handling of a command.
            </summary>
            <param name="command">The command to dispatch.</param>
            <param name="argument">The provided arguments.</param>
            <param name="info">A <see cref="T:Dalamud.Game.Command.CommandInfo"/> object describing this command.</param>
        </member>
        <member name="M:Dalamud.Game.Command.CommandManager.AddHandler(System.String,Dalamud.Game.Command.CommandInfo)">
            <summary>
            Add a command handler, which you can use to add your own custom commands to the in-game chat.
            </summary>
            <param name="command">The command to register.</param>
            <param name="info">A <see cref="T:Dalamud.Game.Command.CommandInfo"/> object describing the command.</param>
            <returns>If adding was successful.</returns>
        </member>
        <member name="M:Dalamud.Game.Command.CommandManager.RemoveHandler(System.String)">
            <summary>
            Remove a command from the command handlers.
            </summary>
            <param name="command">The command to remove.</param>
            <returns>If the removal was successful.</returns>
        </member>
        <member name="T:Dalamud.Game.Internal.Framework">
            <summary>
            This class represents the Framework of the native game client and grants access to various subsystems.
            </summary>
        </member>
        <member name="P:Dalamud.Game.Internal.Framework.Address">
            <summary>
            A raw pointer to the instance of Client::Framework
            </summary>
        </member>
        <member name="P:Dalamud.Game.Internal.Framework.Gui">
            <summary>
            The GUI subsystem, used to access e.g. chat.
            </summary>
        </member>
        <member name="P:Dalamud.Game.Internal.Framework.Network">
            <summary>
            The Network subsystem, used to access network data.
            </summary>
        </member>
        <member name="M:Dalamud.Game.Internal.Gui.ChatGui.PrintChat(Dalamud.Game.Chat.XivChatEntry)">
            <summary>
                Queue a chat message. While method is named as PrintChat, it only add a entry to the queue,
                later to be processed when UpdateQueue() is called.
            </summary>
            <param name="chat">A message to send.</param>
        </member>
        <member name="M:Dalamud.Game.Internal.Gui.ChatGui.UpdateQueue(Dalamud.Game.Internal.Framework)">
            <summary>
                Process a chat queue.
            </summary>
        </member>
        <member name="M:Dalamud.Game.Internal.Libc.OwnedStdString.#ctor(System.IntPtr,Dalamud.Game.Internal.Libc.OwnedStdString.DeallocatorDelegate)">
            <summary>
            Construct a wrapper around std::string
            </summary>
            <remarks>
            Violating any of these might cause an undefined hehaviour.
            1. This function takes the ownership of the address.
            2. A memory pointed by address argument is assumed to be allocated by Marshal.AllocHGlobal thus will try to call Marshal.FreeHGlobal on the address.
            3. std::string object pointed by address must be initialized before calling this function.
            </remarks>
            <param name="address"></param>
            <param name="dealloc">A deallocator function.</param>
            <returns></returns>
        </member>
        <member name="T:Dalamud.Game.Internal.Libc.StdString">
            <summary>
            Interation with std::string
            </summary>
        </member>
        <member name="M:Dalamud.Game.Internal.Network.GameNetwork.UpdateQueue(Dalamud.Game.Internal.Framework)">
            <summary>
                Process a chat queue.
            </summary>
        </member>
        <member name="T:Dalamud.Game.SigScanner">
            <summary>
            A SigScanner facilitates searching for memory signatures in a given ProcessModule.
            </summary>
        </member>
        <member name="M:Dalamud.Game.SigScanner.#ctor(System.Diagnostics.ProcessModule,System.Boolean)">
            <summary>
            Set up the SigScanner.
            </summary>
            <param name="module">The ProcessModule to be used for scanning</param>
            <param name="doCopy">Whether or not to copy the module upon initialization for search operations to use, as to not get disturbed by possible hooks.</param>
        </member>
        <member name="P:Dalamud.Game.SigScanner.IsCopy">
            <summary>
            If the search on this module is performed on a copy.
            </summary>
        </member>
        <member name="P:Dalamud.Game.SigScanner.Is32BitProcess">
            <summary>
            If the ProcessModule is 32-bit.
            </summary>
        </member>
        <member name="P:Dalamud.Game.SigScanner.SearchBase">
            <summary>
            The base address of the search area. When copied, this will be the address of the copy.
            </summary>
        </member>
        <member name="P:Dalamud.Game.SigScanner.TextSectionBase">
            <summary>
            The base address of the .text section search area.
            </summary>
        </member>
        <member name="P:Dalamud.Game.SigScanner.TextSectionOffset">
            <summary>
            The offset of the .text section from the base of the module.
            </summary>
        </member>
        <member name="P:Dalamud.Game.SigScanner.TextSectionSize">
            <summary>
            The size of the text section.
            </summary>
        </member>
        <member name="P:Dalamud.Game.SigScanner.DataSectionBase">
            <summary>
            The base address of the .data section search area.
            </summary>
        </member>
        <member name="P:Dalamud.Game.SigScanner.DataSectionOffset">
            <summary>
            The offset of the .data section from the base of the module.
            </summary>
        </member>
        <member name="P:Dalamud.Game.SigScanner.DataSectionSize">
            <summary>
            The size of the .data section.
            </summary>
        </member>
        <member name="P:Dalamud.Game.SigScanner.Module">
            <summary>
            The ProcessModule on which the search is performed.
            </summary>
        </member>
        <member name="M:Dalamud.Game.SigScanner.Dispose">
            <summary>
            Free the memory of the copied module search area on object disposal, if applicable.
            </summary>
        </member>
        <member name="M:Dalamud.Game.SigScanner.ScanText(System.String)">
            <summary>
            Scan for a byte signature in the .text section.
            </summary>
            <param name="signature">The signature.</param>
            <returns>The real offset of the found signature.</returns>
        </member>
        <member name="M:Dalamud.Game.SigScanner.ScanData(System.String)">
            <summary>
            Scan for a byte signature in the .data section.
            </summary>
            <param name="signature">The signature.</param>
            <returns>The real offset of the found signature.</returns>
        </member>
        <member name="M:Dalamud.Game.SigScanner.ScanModule(System.String)">
            <summary>
            Scan for a byte signature in the whole module search area.
            </summary>
            <param name="signature">The signature.</param>
            <returns>The real offset of the found signature.</returns>
        </member>
        <member name="T:Dalamud.Hooking.Hook`1">
            <summary>
            Manages a hook which can be used to intercept a call to native function.
            This class is basically a thin wrapper around the LocalHook type to provide helper functions.
            </summary>
            <typeparam name="T">Delegate type to represents a function prototype. This must be the same prototype as original function do.</typeparam>
        </member>
        <member name="P:Dalamud.Hooking.Hook`1.Address">
            <summary>
            A memory address of the target function. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Hook is already disposed.</exception>
        </member>
        <member name="P:Dalamud.Hooking.Hook`1.Original">
            <summary>
            A delegate function that can be used to call the actual function as if function is not hooked yet.
            </summary>
            <remarks></remarks>
            <exception cref="T:System.ObjectDisposedException">Hook is already disposed.</exception>
        </member>
        <member name="M:Dalamud.Hooking.Hook`1.FromSymbol(System.String,System.String,System.Delegate,System.Object)">
            <summary>
            Creates a hook. Hooking address is inferred by calling to GetProcAddress() function. Hook is not activated until Enable() method is called.
            </summary>
            <param name="moduleName">A name of the module currently loaded in the memory. (e.g. ws2_32.dll)</param>
            <param name="exportName">A name of the exported function name (e.g. send)</param>
            <param name="detour">Callback function. Delegate must have a same original function prototype.</param>
            <param name="callbackParam">A callback object which can be accessed within the detour.</param>
            <returns></returns>
        </member>
        <member name="M:Dalamud.Hooking.Hook`1.#ctor(System.IntPtr,System.Delegate,System.Object)">
            <summary>
            Createss a hook. Hook is not activated until Enable() method is called.
            </summary>
            <param name="address">A memory address to install a hook.</param>
            <param name="detour">Callback function. Delegate must have a same original function prototype.</param>
            <param name="callbackParam">A callback object which can be accessed within the detour.</param>
        </member>
        <member name="M:Dalamud.Hooking.Hook`1.Dispose">
            <summary>
            Remove a hook from the current process.
            </summary>
        </member>
        <member name="M:Dalamud.Hooking.Hook`1.Enable">
            <summary>
            Starts intercepting a call to the function. 
            </summary>
        </member>
        <member name="M:Dalamud.Hooking.Hook`1.Disable">
            <summary>
            Stops intercepting a call to the function. 
            </summary>
        </member>
        <member name="E:Dalamud.Interface.InterfaceManager.OnDraw">
            <summary>
            This event gets called by a plugin UiBuilder when read
            </summary>
        </member>
        <member name="T:Dalamud.Interface.UiBuilder">
            <summary>
            This class represents the Dalamud UI that is drawn on top of the game.
            It can be used to draw custom windows and overlays.
            </summary>
        </member>
        <member name="E:Dalamud.Interface.UiBuilder.OnBuildUi">
            <summary>
            The delegate that gets called when Dalamud is ready to draw your windows or overlays.
            When it is called, you can use static ImGui calls.
            </summary>
        </member>
        <member name="M:Dalamud.Interface.UiBuilder.#ctor(Dalamud.Interface.InterfaceManager,System.String)">
            <summary>
            Create a new UiBuilder and register it. You do not have to call this manually.
            </summary>
            <param name="interfaceManager">The interface manager to register on.</param>
            <param name="namespaceName">The plugin namespace.</param>
        </member>
        <member name="M:Dalamud.Interface.UiBuilder.Dispose">
            <summary>
            Unregister the UiBuilder. Do not call this in plugin code.
            </summary>
        </member>
        <member name="M:Dalamud.Interface.UiBuilder.LoadImage(System.String)">
            <summary>
            Loads an image from the specified file.
            </summary>
            <param name="filePath">The full filepath to the image.</param>
            <returns>A <see cref="T:ImGuiScene.TextureWrap"/> object wrapping the created image.  Use <see cref="P:ImGuiScene.TextureWrap.ImGuiHandle"/> inside ImGui.Image()</returns>
        </member>
        <member name="M:Dalamud.Interface.UiBuilder.LoadImage(System.Byte[])">
            <summary>
            Loads an image from a byte stream, such as a png downloaded into memory.
            </summary>
            <param name="imageData">A byte array containing the raw image data.</param>
            <returns>A <see cref="T:ImGuiScene.TextureWrap"/> object wrapping the created image.  Use <see cref="P:ImGuiScene.TextureWrap.ImGuiHandle"/> inside ImGui.Image()</returns>
        </member>
        <member name="T:Dalamud.Plugin.DalamudPluginInterface">
            <summary>
            This class acts as an interface to various objects needed to interact with Dalamud and the game.
            </summary>
        </member>
        <member name="F:Dalamud.Plugin.DalamudPluginInterface.CommandManager">
            <summary>
            The CommandManager object that allows you to add and remove custom chat commands.
            </summary>
        </member>
        <member name="F:Dalamud.Plugin.DalamudPluginInterface.ClientState">
            <summary>
            The ClientState object that allows you to access current client memory information like actors, territories, etc.
            </summary>
        </member>
        <member name="F:Dalamud.Plugin.DalamudPluginInterface.Framework">
            <summary>
            The Framework object that allows you to interact with the client.
            </summary>
        </member>
        <member name="F:Dalamud.Plugin.DalamudPluginInterface.UiBuilder">
            <summary>
            A <see cref="F:Dalamud.Plugin.DalamudPluginInterface.UiBuilder">UiBuilder</see> instance which allows you to draw UI into the game via ImGui draw calls.
            </summary>
        </member>
        <member name="F:Dalamud.Plugin.DalamudPluginInterface.TargetModuleScanner">
            <summary>
            A <see cref="T:Dalamud.Game.SigScanner">SigScanner</see> instance targeting the main module of the FFXIV process.
            </summary>
        </member>
        <member name="F:Dalamud.Plugin.DalamudPluginInterface.Data">
            <summary>
            A <see cref="T:Dalamud.Data.DataManager">DataManager</see> instance which allows you to access game data needed by the main dalamud features.
            </summary>
        </member>
        <member name="M:Dalamud.Plugin.DalamudPluginInterface.#ctor(Dalamud.Dalamud,System.String)">
            <summary>
            Set up the interface and populate all fields needed.
            </summary>
            <param name="dalamud"></param>
        </member>
        <member name="M:Dalamud.Plugin.DalamudPluginInterface.Dispose">
            <summary>
            Unregister your plugin and dispose all references. You have to call this when your IDalamudPlugin is disposed.
            </summary>
        </member>
        <member name="M:Dalamud.Plugin.DalamudPluginInterface.SavePluginConfig(Dalamud.Configuration.IPluginConfiguration)">
            <summary>
            Save a plugin configuration(inheriting IPluginConfiguration).
            </summary>
            <param name="currentConfig">The current configuration.</param>
        </member>
        <member name="M:Dalamud.Plugin.DalamudPluginInterface.GetPluginConfig">
            <summary>
            Get a previously saved plugin configuration or null if none was saved before.
            </summary>
            <returns>A previously saved config or null if none was saved before.</returns>
        </member>
        <member name="M:Dalamud.Plugin.DalamudPluginInterface.Log(System.String,System.Object[])">
            <summary>
            Log a templated message to the in-game debug log.
            </summary>
            <param name="messageTemplate">The message template.</param>
            <param name="values">Values to log.</param>
        </member>
        <member name="M:Dalamud.Plugin.DalamudPluginInterface.LogError(System.String,System.Object[])">
            <summary>
            Log a templated error message to the in-game debug log.
            </summary>
            <param name="messageTemplate">The message template.</param>
            <param name="values">Values to log.</param>
        </member>
        <member name="M:Dalamud.Plugin.DalamudPluginInterface.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            Log a templated error message to the in-game debug log.
            </summary>
            <param name="exception">The exception that caused the error.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="values">Values to log.</param>
        </member>
        <member name="T:Dalamud.Plugin.IDalamudPlugin">
            <summary>
            This interface represents a basic Dalamud plugin. All plugins have to implement this interface.
            </summary>
        </member>
        <member name="P:Dalamud.Plugin.IDalamudPlugin.Name">
            <summary>
            The name of the plugin.
            </summary>
        </member>
        <member name="M:Dalamud.Plugin.IDalamudPlugin.Initialize(Dalamud.Plugin.DalamudPluginInterface)">
            <summary>
            Initializes a Dalamud plugin.
            </summary>
            <param name="pluginInterface">The <see cref="T:Dalamud.Plugin.DalamudPluginInterface"/> needed to access various Dalamud objects.</param>
        </member>
        <member name="T:Dalamud.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Dalamud.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Dalamud.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Dalamud.Properties.Resources.eye">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
